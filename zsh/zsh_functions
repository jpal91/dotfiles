_boil() {
    ~/bin/boil $@ | tee /tmp/boil
    BOIL=$(tail -n 1 /tmp/boil)
    rm -f /tmp/boil
}

# >>> START Take functions

# mkcd is equivalent to takedir
function mkcd takedir() {
  mkdir -p $@ && cd ${@:$#}
}

function takeurl() {
  local data thedir
  data="$(mktemp)"
  curl -L "$1" > "$data"
  tar xf "$data"
  thedir="$(tar tf "$data" | head -n 1)"
  rm "$data"
  cd "$thedir"
}

function takegit() {
  git clone "$1"
  cd "$(basename ${1%%.git})"
}

function take() {
  if [[ $1 =~ ^(https?|ftp).*\.(tar\.(gz|bz2|xz)|tgz)$ ]]; then
    takeurl "$1"
  elif [[ $1 =~ ^([A-Za-z0-9]\+@|https?|git|ssh|ftps?|rsync).*\.git/?$ ]]; then
    takegit "$1"
  else
    takedir "$@"
  fi
}

# <<< END Take Functions

# Enables user to copy the buffer to the clipboard
copy_line_to_clip() {
    if [ "$BUFFER" != '' ]; then
        echo $BUFFER | xclip -r -selection clipboard
        COPIED='%B%F{47}📋%f%b '
        zle reset-prompt
    fi
}
zle -N copy_line_to_clip
bindkey '^k' copy_line_to_clip

tode() {
	touch $1 && code $1
}

# Gets time since last command was run
get_time() {
    local end_time=$(date +%s.%N)
    local diff=$(echo "$end_time - $START_TIME" | bc)
    TIME_STR=$(printf "\u23f0%.3f " $diff)
}

# Gets exit status of last command
exit_status() {
    if [ $? -eq 0 ]; then
        echo -e "\e[32m●\e[0m"
    else
        echo -e "\e[31m●\e[0m"
    fi
}

mvcd() {
	local cur_pwd=$PWD
	local res=$(cd $1 && mv "$1/$2" "$1/$3") || 1
	cd $cur_pwd
	return $res
}


# >>> START HINTS
typeset -g _zsh_highlight_hint_on=true
typeset -gi _zsh_highlight_hint_start=0
typeset -gi _zsh_highlight_hint_end=0
typeset -A hint_options
hint_options=(
	'mvcd' "[directory] [old name] [new name]"
	'take' "[url|.git|directory]"
	'tode' "[file]"
	'urlscan' "[url]"
)

_zsh_highlight_hint_check() {
	case $BUFFER in
		mvcd|take|tode|urlscan)
			POSTDISPLAY="  ${hint_options[$BUFFER]}"
			;;
		*)
			POSTDISPLAY=""
			;;
	esac

	if [ -z $POSTDISPLAY ]; then
		_zsh_highlight_hint_start=0
		_zsh_highlight_hint_end=0
	else
		_zsh_highlight_hint_start=$(($#BUFFER + 1))
		_zsh_highlight_hint_end=$(($#BUFFER + $#POSTDISPLAY))
	fi
}

# <<< END HINTS

# >>> Override zsh's default commands

precmd() {
    # Print the previously configured title
    print -Pnr -- "$TERM_TITLE"

    if [ ! -z $START_TIME ]; then
        get_time
    else
        TIME_STR=''
    fi

    START_TIME=''

    # Print a new line before the prompt, but only if it is not the first line
    if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
        if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
            _NEW_LINE_BEFORE_PROMPT=1
        else
            print ""
        fi
    fi

    COPIED=''
}

preexec() {
    if [ -z "$(grep -oE '(nano|vim|nav|doty edit)' <<< $2)" ]; then
        START_TIME=$(date +%s.%N)
    fi
}

# <<< END Override


# >>> START Async Workers

# Variables to determine async worker behavior
ASYNC_WORKERS=true # Toggles workers on/off
PROMPT_GIT_INFO=true # Toggles git info on/off
PROMPT_SYS_INFO=false # Toggles system info on/off

# Main callback for async worker
worker_callback() {
    # Handles non-zero return codes
	if [ $2 -ne 0 ]; then
		VCS_STR=" | %B%F{red}ASYNC ERROR%f%b"
		SYS_INFO_STR=""
		restart_workers worker worker_callback
		log_async_error worker "$@"
		return
	fi

	if [ $1 == "get_vcs" ]; then
		VCS_STR="$3"
	elif [ $1 == "get_sys_info" ]; then
		SYS_INFO_STR="$3"
	fi

	# Resets prompt when all jobs are done
	if [ $6 -eq 0 ]; then
    	zle reset-prompt
	fi
}

# Gets VCS/git info for the current directory
get_vcs() {
	cd -q $1
	vcs_info 

	print ${vcs_info_msg_0_}
}

# Gets general system info
get_sys_info() {
	local disk_usage=$(df -h | grep /dev/sdb2 | awk '{print $5}' | sed 's/%//g')
	local cpu_usage=$(top -bn1 | grep load | awk '{printf "%.2f%%", $(NF-2)}')
	local ram_usage=$(free | grep Mem | awk '{printf "%.2f%%", $3/$2 * 100.0}')
	local sys_str=" %B%F{blue}◉%f%b 🖴 %B%F{blue}$disk_usage%% %b|%f \U1F4BB%F{blue}%B$cpu_usage%%  %b|%f \U1F4BE%F{blue}%B$ram_usage%%  ◉%b%f"

	echo -e $sys_str
}

# Initialize async workers
if [ "$ASYNC_WORKERS" = true ] && [ -f /usr/share/zsh-async/async.zsh ]; then
	source /usr/share/zsh-async/async.zsh
	async_init
	async_start_worker worker
	async_register_callback worker worker_callback
else
	ASYNC_WORKERS=false
	PROMPT_GIT_INFO=false
	PROMPT_SYS_INFO=false
fi

# Restarts the worker on error
restart_workers() {
	async_unregister_callback $1 $2
	async_stop_worker $1
	async_start_worker $1
	async_register_callback $1 $2
}

# Stops worker on normal zsh exit
stop_worker() {
	async_stop_worker worker
}
add-zsh-hook zshexit stop_worker

# Logs async worker error to a tmp file file for debugging
log_async_error() {
	echo "$(date) - $@" >> /tmp/async_error.log
}

# Flushes the workers queue before each precmd
flush_worker() {
	async_flush_jobs worker
}

# Precmd hook to add async vcs job
vcs_precmd() {
	async_job worker get_vcs $PWD
}
# add-zsh-hook precmd vcs_precmd

# Precmd hook for async system info job
sys_info_precmd() {
	async_job worker get_sys_info
}

# Toggles git info job on/off
toggle_prompt_git_info() {
	if [ "$PROMPT_GIT_INFO" = true ]; then
		PROMPT_GIT_INFO=false
		add-zsh-hook -d precmd vcs_precmd
		VCS_STR=""
	else
		PROMPT_GIT_INFO=true
		add-zsh-hook precmd vcs_precmd
		VCS_STR="$(get_vcs $PWD)"
	fi
	zle reset-prompt
}
zle -N toggle_prompt_git_info
bindkey '^G' toggle_prompt_git_info

# Toggles sys info job on/off
toggle_prompt_sys_info() {
	if [ "$PROMPT_SYS_INFO" = true ]; then
		PROMPT_SYS_INFO=false
		add-zsh-hook -d precmd sys_info_precmd
		SYS_INFO_STR=""
	else
		PROMPT_SYS_INFO=true
		add-zsh-hook precmd sys_info_precmd
		SYS_INFO_STR="$(get_sys_info)"
	fi
	zle reset-prompt
}
zle -N toggle_prompt_sys_info
bindkey '^P' toggle_prompt_sys_info

# Adds flush jobs if async workers are active
if [ "$ASYNC_WORKERS" = true ]; then
	add-zsh-hook precmd flush_worker
fi

# Start git info job if enabled on zsh startup
if [ "$PROMPT_GIT_INFO" = true ]; then
	add-zsh-hook precmd vcs_precmd
fi

# Start sys info job if enabled on zsh startup
if [ "$PROMPT_SYS_INFO" = true ]; then
	add-zsh-hook precmd sys_info_precmd
fi

# <<< END Async Workers

# TODO: Autosuggestions

# Load zsh-async
# source path/to/zsh-async/async.zsh

# # Initialize a new async worker
# async_init_worker my_worker -n

# # Define a function that generates suggestions
# function generate_suggestions {
#     # Cancel any previous suggestion
#     async_flush_jobs my_worker

#     # Start generating a new suggestion
#     async_start_job my_worker generate_suggestion_job $1
# }

# # Define a function that reads suggestions
# function read_suggestions {
#     # Read the suggestion from the job's output
#     local suggestion=$(async_job_output)
#     # Insert the suggestion into the command line
#     BUFFER="$BUFFER $suggestion"
# }

# # Define the suggestion generation job
# function generate_suggestion_job {
#     # This would be a lot more complex in a real implementation
#     echo "suggestion for $1"
# }

# # Register the read_suggestions function to be called when a job completes
# async_register_callback my_worker read_suggestions

# # Bind the generate_suggestions function to a key
# zle -N generate_suggestions
# bindkey "^X^S" generate_suggestions



# # Define your widget
# function buffer-listener {
#     # Call the original widget to keep its behavior
#     zle .$WIDGET
#     # Then do your stuff
#     echo "Current buffer: $BUFFER"
# }

# # Create your widget in ZLE
# zle -N buffer-listener

# # Bind your widget to the self-insert and delete-char widgets
# zle -N self-insert buffer-listener
# zle -N delete-char buffer-listener




# Above may be slightly more efficient as it calls .$WIDGET
# Define a custom widget that generates suggestions
# function custom-self-insert {
#     # Call the original self-insert widget
#     zle .self-insert
#     # Generate a new suggestion
#     generate_suggestions $BUFFER
# }

# # Register the custom widget
# zle -N custom-self-insert

# # Bind the custom widget to all printable characters
# for key in {a..z} {A..Z} {0..9}; do
#     bindkey $key custom-self-insert
# done
