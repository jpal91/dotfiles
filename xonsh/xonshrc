import sys
import re
import json
from datetime import datetime
from xonsh.xontribs import xontribs_load
from xonsh.contexts import Block
from prompt_toolkit.keys import Keys
import pyperclip


# sys.path.insert(0, '~/dev/xontrib-hints')
sys.path.insert(0, '~/dev/xontrib-utils')
sys.path.insert(1, '~/dev/xontrib-chatgpt')
xontrib load custom_inkpot abbrevs keys

# $XONSH_SHOW_TRACEBACK = True
$OPENAI_API_KEY = "{{ open_ai_key }}"
# $OPENAI_CHAT_MODEL = 'gpt-4'
# $FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True
$AUTO_CD = True
$PATH.append('~/mambaforge/envs/xonsh/bin')
$PATH.append('~/bin')
# $PATH.append('$HOME/.cargo/bin')
$PATH.append("~/.local/share/pnpm")

# NPM
$NVM_DIR = f'{$HOME}/.nvm'
$NVM_NODE_VERSION = 'v20.12.0'
$NVM_BIN = f'{$NVM_DIR}/versions/node/{$NVM_NODE_VERSION}/bin/'
aliases['nvm'] = """bash -c @(f'[ -s "{$HOME}/.nvm/nvm.sh" ] && . "{$HOME}/.nvm/nvm.sh" && nvm {" ".join($args)}')"""
aliases['node'] = f'{$NVM_DIR}/versions/node/{$NVM_NODE_VERSION}/bin/node'
aliases['npm'] = f'{$NVM_DIR}/versions/node/{$NVM_NODE_VERSION}/bin/npm'
aliases['npx'] = f'{$NVM_DIR}/versions/node/{$NVM_NODE_VERSION}/bin/npx'

class PyToJSON(Block):
    __xonsh_block__ = str

    def __enter__(self):
        return json.dumps(eval(self.macro_block), indent=4)
    
    def __exit__(self, *exc):
        del self.macro_block, self.macro_globals, self.macro_locals



#def _boil(args):
#    ~/bin/boil @(args) | tee /tmp/boil
#    $BOIL=$(tail -n 1 /tmp/boil).strip()
#    rm -f /tmp/boil

def _take_git(path, base):
    git clone @(path) @(base)
    cd @(base)

def _take_url(path):
    data=$(mktemp).strip()
    curl -L @(path) > @(data)
    directory=$(tar -tf @(data) | head -n 1).strip()
    rm @(data)
    cd @(directory)

def take(args):
    if re.match(r'^(https?|ftp).*\.(tar\.(gz|bz2|xz)|tgz)$', args[0]):
        _take_url(args[0])
    elif re.match(r'^([A-Za-z0-9]\+@|https?|git|ssh|ftps?|rsync).*\.git/?$', args[0]):
        _take_git(args[0], args[1] if len(args) > 1 else pf'{args[0]}'.stem)
    else:
        mkdir -p @(args[0]) && cd @(args[0])

# ALIASES
#aliases['ls'] = 'ls --color=auto'
aliases['ls'] = 'lsd'
aliases['ll'] = 'ls -lAh'
aliases['c'] = 'clear'
aliases['cc'] = 'clear && cd'
aliases['..'] = 'cd ../'
abbrevs['...'] = 'cd ../../'
aliases['....'] = 'cd ../../../'
aliases['.....'] = 'cd ../../../../'
#aliases['boil'] = _boil
aliases['take'] = take

abbrevs['xl'] = 'xontrib load'
abbrevs['xu'] = 'xontrib unload'
abbrevs['xr'] = 'xontrib reload'


# CONDA/MAMBA
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if !(test -f "~/mambaforge/bin/conda"):
    import sys as _sys
    from types import ModuleType as _ModuleType
    _mod = _ModuleType("xontrib.conda",
                       "Autogenerated from $(~/mambaforge/bin/conda shell.xonsh hook)")
    __xonsh__.execer.exec($("~/mambaforge/bin/conda" "shell.xonsh" "hook"),
                          glbs=_mod.__dict__,
                          filename="$(~/mambaforge/bin/conda shell.xonsh hook)")
    _sys.modules["xontrib.conda"] = _mod
    del _sys, _mod, _ModuleType
# <<< conda initialize <<<
# END CONDA/MAMBA


def python_env():
    return $(basename $CONDA_DEFAULT_ENV).strip()


def return_code(code):

    if code == 0:
        return '{BOLD_GREEN}●'
    else:
        return '{BOLD_RED}●'

$_COPIED=False
$_COMMAND_TIME_STR = ''
$PROMPT_FIELDS['command_time'] = lambda: $_COMMAND_TIME_STR

$PROMPT_FIELDS['last_return_code'] = lambda: return_code($LAST_RETURN_CODE)
$PROMPT_FIELDS['pyenv'] = lambda: python_env()
$PROMPT_FIELDS['copied'] = lambda: '📋' if $_COPIED else ''
$PROMPT_FIELDS['gitstatus.branch'].prefix = '{YELLOW}\ue0a0 {BOLD_CYAN}'
$PROMPT_FIELDS['gitstatus.branch'].suffix = '{GREEN} '
$PROMPT_FIELDS['gitstatus.changed'].prefix = '{YELLOW}+'

$MLPROMPT_LINE_COUNT = 0


@events.on_post_prompt
def reset_timer():
    $_COMMAND_TIME_STR = ''

@events.on_postcommand
def set_time(cmd: str, rtn: int, out: str or None, ts: list):
    $_COPIED=False
    start_ts, stop_ts = ts
    start, end = datetime.fromtimestamp(start_ts), datetime.fromtimestamp(stop_ts)
    blacklist = ['nano', 'doty edit', 'vim', 'less', 'nav']

    for b in blacklist:
        if cmd.startswith(b):
            $_COMMAND_TIME_STR = ''
            return
    
    $_COMMAND_TIME_STR = f'⏰{(end - start).total_seconds():.2f}s'

def prompt():
    p = """\n{INTENSE_BLUE}┌ {last_return_code} {INTENSE_BLUE}[ {BOLD_#ff0000}{user}{INTENSE_BLUE} ] [ {BOLD_#2fff00}ఒ {pyenv} {INTENSE_BLUE}] [ {BOLD_YELLOW}{cwd}{gitstatus: {INTENSE_BLUE}|{RESET} {}}{INTENSE_BLUE} ] {BOLD_WHITE}{command_time}{copied}
{INTENSE_BLUE}└─{INTENSE_BLUE}▶ {BOLD_RED}"""
    return p


$PROMPT = prompt()
